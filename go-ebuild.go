//go-ebuild insipred by cargo-ebuild 
// rappidly proto-magicked into exitstance with CHATGPT 
// chatGPT got mad PhD level up... helping killer skills...  :-)

package main

import (
    "bufio"
    "encoding/json"
    "fmt"
    "log"
    "os"
    "os/exec"
    "strings"
	"io/ioutil"


"github.com/williamh/get-ego-vendor"
// embed// include get-ego-vendor command.. 
)

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
)

func egosum() {
	// Create a temporary file to store the output of the command.
	f, err := ioutil.TempFile("", "egosum")
	if err != nil {
		log.Fatal(err)
	}
	defer os.Remove(f.Name())

	// Run the command and write its output to the temporary file.
	cmd := exec.Command("get-ego-vendor")
	cmd.Stdout = f
	if err := cmd.Run(); err != nil {
		log.Fatal(err)
	}

	// Read the contents of the temporary file.
	content, err := ioutil.ReadFile(f.Name())
	if err != nil {
		log.Fatal(err)
	}

	// Store the output in the EGO_SUM environment variable.
	os.Setenv("EGO_SUM", string(content))

	// Print the output to the console.
	fmt.Println(string(content))
}


func main() {
    // Prompt the user for a Git repository URL.
    var repo string
    fmt.Print("Enter Git repository URL: ")
    if _, err := fmt.Scanln(&repo); err != nil {
        log.Fatal(err)
    }
    fmt.Printf("You entered: %s\n", repo)

    // Run "go list -json -m all" to retrieve information about all dependencies.
    cmd := exec.Command("go", "list", "-json", "-m", "all")
    cmd.Dir = os.Getenv("GOPATH") + "/src/" + repo
    out, err := cmd.Output()
    if err != nil {
        log.Fatal(err)
    }

    // Parse the output of "go list" to extract information about the dependencies.
    scanner := bufio.NewScanner(strings.NewReader(string(out)))
    for scanner.Scan() {
        var mod struct {
            Path     string
            Version  string
            Licenses []struct{ Type string }
        }
        if err := scanner.Err(); err != nil {
            log.Fatal(err)
        }
        if err := json.Unmarshal(scanner.Bytes(), &mod); err != nil {
            log.Fatal(err)
        }

        // Write the ebuild file for this dependency.
        writeEbuild(mod.Path, mod.Version, mod.Licenses)
    }
}

func writeEbuild(path, version string, licenses []struct{ Type string }) {
    // Generate the metadata for the ebuild.
    pkg := strings.ReplaceAll(path, "/", "-")
    metadata := fmt.Sprintf(`# Generated by go-ebuild
EAPI=7
inherit go-module
GITHUB_USER=user
GITHUB_REPO=%s
EGO_SUM="%s"
LICENSE="%s"
`, path, version, licenses[0].Type)

    // Write the metadata and build instructions to the ebuild file.
    f, err := os.Create(fmt.Sprintf("%s-%s.ebuild", pkg, version))
    if err != nil {
        log.Fatal(err)
    }
    defer f.Close()
    f.WriteString(metadata)
    f.WriteString(fmt.Sprintf(`src_compile() {
    go-module_src_compile
}

src_install() {
    go-module_src_install
}
`))
}
